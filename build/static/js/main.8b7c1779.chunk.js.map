{"version":3,"sources":["BooksAPI.js","Card.js","SearchPage.js","Shelf.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","get","bookId","fetch","concat","then","res","json","data","book","update","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","books","Card","handleChange","e","preventDefault","_this","props","parent","target","value","add","react_default","a","createElement","className","style","width","height","backgroundImage","this","image","onChange","selected","disabled","title","authors","Component","SearchPage","_isMounted","state","results","handleSearch","BooksAPI","error","setState","updateQuery","trim","toLowerCase","book_id","_this2","react_router_dom","to","type","event","placeholder","map","key","src_Card","imageLinks","smallThumbnail","Shelf","bookid","currently","includes","BooksApp","currentlyReading","read","wantToRead","book_","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","current","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop","_iterator2","_this3","react_router","exact","path","render","src_Shelf","src_SearchPage","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.8b7c1779.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react';\r\nclass Card extends Component {\r\n\r\n    handleChange = (e) => {\r\n            e.preventDefault();\r\n            if(this.props.parent === \"shelf\")\r\n                this.props.update(this.props.id,e.target.value)\r\n            else {\r\n                this.props.add(this.props.id,e.target.value)\r\n            }\r\n    } \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"book\">\r\n            <div className=\"book-top\">\r\n              <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${this.props.image})`}}></div>\r\n              <div className=\"book-shelf-changer\">\r\n                <select value={this.props.shelf} onChange={this.handleChange} >\r\n                  <option value=\"move\" selected disabled>Move to...</option>\r\n                  <option value=\"currentlyReading\">Currently Reading</option>\r\n                  <option value=\"wantToRead\">Want to Read</option>\r\n                  <option value=\"read\">Read</option>\r\n                  <option value=\"none\">None</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className=\"book-title\">{this.props.title}</div>\r\n            <div className=\"book-authors\">{this.props.authors}</div>\r\n          </div>            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport Card from './Card'\r\nclass SearchPage extends Component {\r\n    _isMounted = false;\r\n\r\n    state = { \r\n        query:'',\r\n        results: []\r\n    }\r\n    handleSearch = (query) => {\r\n        BooksAPI.search(query)\r\n            .then((results) => {\r\n                // console.log(results);\r\n                if(!results.error)\r\n                    this.setState({results:results});\r\n                else\r\n                    this.setState({results:[]});\r\n            })\r\n    }\r\n    updateQuery = (query) => {\r\n        if(query){\r\n        this.setState({query:query.trim().toLowerCase()});\r\n        this.handleSearch(query)\r\n        } else {\r\n            this.setState({results:[]});\r\n        }\r\n    }\r\n    add = (book_id,shelf) => {\r\n        this.props.add(book_id,shelf);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            (\r\n                <div className=\"search-books\">\r\n                  <div className=\"search-books-bar\">\r\n                    <Link to='/'>\r\n                        <button className=\"close-search\">Close</button>\r\n                    </Link>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                      {/*\r\n                        NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                        You can find these search terms here:\r\n                        https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n      \r\n                        However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                        you don't find a specific author or title. Every search is limited by search terms.\r\n                      */}\r\n                      <input \r\n                      type=\"text\" \r\n                      onChange={(event) =>this.updateQuery(event.target.value)} \r\n                      placeholder=\"Search by title or author\"\r\n                      \r\n                      />\r\n\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"search-books-results\">\r\n                    <ol className=\"books-grid\">\r\n                    {this.state.results.map(book => {\r\n                        // console.log(book)\r\n                            return (\r\n                                <li key={book.id}>\r\n                                    <Card \r\n                                    parent=\"search\"\r\n                                    add={this.add}\r\n                                    id = {book.id}\r\n                                    update = {this.update}\r\n                                    shelf={book.shelf} \r\n                                    title={book.title} \r\n                                    authors = {book.authors} \r\n                                    image={book.imageLinks.smallThumbnail}/>\r\n                                </li>\r\n                           )\r\n                        } \r\n                    )}\r\n\r\n\r\n                    </ol>\r\n                  </div>\r\n                </div>\r\n              )\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchPage;","import React, { Component } from \"react\";\r\nimport Card from \"./Card\";\r\nclass Shelf extends Component {\r\n\r\n    update = (bookid,shelf) => {\r\n\r\n        this.props.update(bookid,shelf);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"bookshelf\">\r\n            <h2 className=\"bookshelf-title\">{this.props.title}</h2>\r\n            <div className=\"bookshelf-books\">\r\n              <ol className=\"books-grid\">\r\n                    {this.props.books.map(book => {\r\n                        if(this.props.currently.includes(book.id)) {\r\n                            return (\r\n                                <li key={book.id}>\r\n                                    <Card \r\n                                    parent=\"shelf\"\r\n                                    id = {book.id}\r\n                                    update = {this.update}\r\n                                    shelf={book.shelf} \r\n                                    title={book.title} \r\n                                    authors = {book.authors} \r\n                                    image={book.imageLinks.smallThumbnail}/>\r\n                                </li>\r\n                           )\r\n                        } \r\n                    })}\r\n                \r\n              </ol>\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n    \r\n\r\n\r\nexport default Shelf;\r\n","import React from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport SearchPage from './SearchPage'\nimport Shelf from \"./Shelf\"\nimport {Route, Link} from 'react-router-dom'\nclass BooksApp extends React.Component {\n  state = {\n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n    \n    books: [],\n    currentlyReading:[],\n    read:[],\n    wantToRead:[]\n  }\n  componentDidMount() {\n      BooksAPI.getAll().then((books) => {\n        this.setState({books: books})\n        for(let book of books) {\n            if(book.shelf === 'currentlyReading')\n                this.setState((current) => ({\n                    currentlyReading: current.currentlyReading.concat([book.id])\n            })) \n            else if(book.shelf === 'wantToRead'){\n                this.setState((current) => ({\n                    wantToRead: current.wantToRead.concat([book.id])\n            }))}\n            else { \n\n                this.setState((current) => ({\n                    read: current.read.concat([book.id])\n                }))            \n            }}\n      })\n  }\n  update = (bookid,shelf) => {\n      var book_ = {}\n      const books = this.state.books\n      for(let book of books) {\n          if (book.id === bookid) {\n              book_ = book;\n          }\n      }\n      BooksAPI.update(book_,shelf)\n        .then((books) => {\n            this.setState(() => ({\n                currentlyReading: books.currentlyReading,\n                wantToRead:books.wantToRead,\n                read:books.read\n            }))\n        })\n    }\n    add = (book_id,shelf) => {\n        BooksAPI.get(book_id).then((book) => {\n            // console.log(book_id);\n            // console.log(shelf);\n            // console.log(book);\n            if(shelf === \"wantToRead\") {\n            this.setState((current) => ({\n                wantToRead: current.wantToRead.concat([book.id]),\n                books:current.books.concat(book)\n            }))\n            } else if(shelf === \"currentlyReading\") {\n                this.setState((current) => ({\n                    currentlyReading: current.currentlyReading.concat([book.id]),\n                    books:current.books.concat(book)\n                })) \n            } else if(shelf === \"read\") {\n                this.setState((current) => ({\n                    read: current.read.concat([book.id]),\n                    books:current.books.concat(book)\n                })) \n            }\n            this.update(book_id,shelf)\n        })\n    }\n\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Route exact path='/' render={() => (\n            <div className=\"list-books\">\n                  <div className=\"list-books-title\">\n                    <h1>MyReads</h1>\n                  </div> \n                  <div className=\"list-books-content\">\n                    <div>\n                      <Shelf update={this.update} books={this.state.books} currently={this.state.currentlyReading} title=\"Currently Reading\" shelf =\"currentlyReading\"/>\n                      <Shelf update={this.update} books={this.state.books} currently={this.state.wantToRead} title=\"Want to Read\" shelf =\"wantToRead\"/>\n                      <Shelf update={this.update} books={this.state.books} currently={this.state.read} title=\"Read\" shelf = \"read\"/>\n                    </div>\n                  </div>\n                  <Link to='/search'>\n                  <div className=\"open-search\">\n                     <button type=\"button\">Add a book</button>\n                  </div>\n                  </Link>\n            </div>\n        )} />\n        <Route path='/search' render={() => (\n            <SearchPage add={this.add}/>\n        )} \n        />\n\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<BrowserRouter>\n<App />\n</BrowserRouter>, document.getElementById('root'))\n"],"sourceRoot":""}